version: 2.1

executors:
  python-docker-executor:
    docker:
      - image: cimg/python:3.11

jobs:
  # first we run tests on Spring Boot api
  run_integration_tests:
    machine: true
    steps:
      - checkout
      - run:
          name: Clear Docker cache
          command: docker system prune --all --force --volumes
      - run:
          name: Run Docker Compose to build, start and test
          command: |
            docker-compose -f docker-compose_test_integration.yaml up --build --abort-on-container-exit --exit-code-from api-test
      - run:
          name: Shut services down
          command: docker-compose -f docker-compose_test_integration.yaml down
      - store_artifacts:
          path: /tests/test-reports
          destination: test-reports

  # then we build all Docker images and push them to docker hub
  push_app_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Inject build info and variables into app
          command: |
            sed -i "s|\$BUILD_NUMBER|${PIPELINE_NUMBER}|g" ./app/src/app/about/about.component.html
            sed -i "s|\$BUILD_DATE|${FORMATTED_DATE}|g" ./app/src/app/about/about.component.html
            sed -i "s|\$GIT_SHA|${TAG}|g" ./app/src/app/about/about.component.html
            sed -i "s|'API_URL'|'${API_URL}'|g" ./app/src/app/shared/environment/environment.ts
            sed -i "s|'API_KEY'|'${API_KEY}'|g" ./app/src/app/shared/environment/environment.ts
      - run:
          name: Push Angular app image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-app:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-app:latest -f ./app/Dockerfile.prod.beta ./app
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-app:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-app:latest
  push_api_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Push Spring Boot api image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-api:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-api:latest -f ./api/Dockerfile.prod ./api
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-api:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-api:latest
  push_backend_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Push Python backend image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-backend:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-backend:latest -f ./backend/Dockerfile.prod ./backend
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-backend:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-backend:latest

  # if everything was successful we deploy the Docker images to the k8s cluster
  deploy_to_gke_k8s_cluster:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - set_env_vars
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo "$GOOGLE_SERVICE_KEY" > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project "$GOOGLE_PROJECT_ID"
            gcloud config set compute/zone "$GOOGLE_COMPUTE_ZONE"
            gcloud container clusters get-credentials "$GKE_CLUSTER_NAME"
      - run:
          name: Deploy to GKE k8s cluster
          command: |
            kubectl apply -f ./k8s
            kubectl set image deployments/app-deployment quizstream-app=$DOCKER_USER/$IMAGE_NAME_BASE-app:$TAG
            kubectl set image deployments/api-deployment quizstream-api=$DOCKER_USER/$IMAGE_NAME_BASE-api:$TAG
            kubectl set image deployments/backend-deployment quizstream-backend=$DOCKER_USER/$IMAGE_NAME_BASE-backend:$TAG

workflows:
  version: 2
  build-deploy:
    jobs:
      - run_integration_tests
      - push_app_image:
          requires:
            - run_integration_tests
      - push_api_image:
          requires:
            - run_integration_tests
      - push_backend_image:
          requires:
            - run_integration_tests
      - deploy_to_gke_k8s_cluster:
          requires:
            - run_integration_tests
            - push_app_image
            - push_api_image
            - push_backend_image

commands:
  set_env_vars:
    steps:
      - run:
          name: Setup tag and base image name
          command: |
            echo 'export TAG=${CIRCLE_SHA1:0:8}' >> $BASH_ENV
            echo 'export IMAGE_NAME_BASE=quizstream' >> $BASH_ENV
            echo 'export FORMATTED_DATE=$(date --utc +"%a, %-d %b, %H:%M")' >> $BASH_ENV
            echo 'export PIPELINE_NUMBER=<< pipeline.number >>' >> $BASH_ENV
  docker_login:
    steps:
      - run:
          name: Login into Docker Hub
          command: |
            echo "$DOCKER_PWD" | docker login --username "$DOCKER_USER" --password-stdin
